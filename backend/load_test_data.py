#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.
–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏ –¥–µ–Ω–µ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
"""
import os
import sys
import django
from datetime import datetime, timedelta
from decimal import Decimal
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from django.contrib.auth import get_user_model
from api.models import Status, Type, Category, Subcategory, MoneyFlow

User = get_user_model()

def create_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("üßë‚Äçüíº –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    users_data = [
        {
            'username': 'alice_manager',
            'email': 'alice@example.com',
            'first_name': '–ê–ª–∏—Å–∞',
            'last_name': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            'password': 'testpass123'
        },
        {
            'username': 'bob_developer',
            'email': 'bob@example.com',
            'first_name': '–ë–æ–±',
            'last_name': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            'password': 'testpass123'
        },
        {
            'username': 'carol_designer',
            'email': 'carol@example.com',
            'first_name': '–ö—ç—Ä–æ–ª',
            'last_name': '–î–∏–∑–∞–π–Ω–µ—Ä',
            'password': 'testpass123'
        },
        {
            'username': 'demo_user',
            'email': 'demo@example.com',
            'first_name': '–î–µ–º–æ',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'password': 'demo123'
        }
    ]
    
    created_users = []
    for user_data in users_data:
        user, created = User.objects.get_or_create(
            username=user_data['username'],
            defaults={
                'email': user_data['email'],
                'first_name': user_data['first_name'],
                'last_name': user_data['last_name'],
            }
        )
        if created:
            user.set_password(user_data['password'])
            user.save()
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} ({user.email})")
        else:
            print(f"  ‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user.username}")
        
        created_users.append(user)
    
    return created_users

def create_reference_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
    
    # –°—Ç–∞—Ç—É—Å—ã
    statuses_data = [
        {'name': '–ê–∫—Ç–∏–≤–Ω—ã–π', 'description': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'},
        {'name': '–í –æ–∂–∏–¥–∞–Ω–∏–∏', 'description': '–û–ø–µ—Ä–∞—Ü–∏—è –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'},
        {'name': '–û—Ç–º–µ–Ω–µ–Ω', 'description': '–û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'},
        {'name': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', 'description': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'}
    ]
    
    statuses = []
    for status_data in statuses_data:
        status, created = Status.objects.get_or_create(
            name=status_data['name'],
            defaults={'description': status_data['description']}
        )
        statuses.append(status)
        if created:
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å: {status.name}")
    
    # –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    types_data = [
        {'name': '–î–æ—Ö–æ–¥'},
        {'name': '–†–∞—Å—Ö–æ–¥'},
        {'name': '–ü–µ—Ä–µ–≤–æ–¥'},
        {'name': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'}
    ]
    
    types = []
    for type_data in types_data:
        type_obj, created = Type.objects.get_or_create(
            name=type_data['name']
        )
        types.append(type_obj)
        if created:
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∏–ø: {type_obj.name}")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_data = {
        '–î–æ—Ö–æ–¥—ã': {
            'type': '–î–æ—Ö–æ–¥',
            'subcategories': ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ü—Ä–µ–º–∏—è', '–§—Ä–∏–ª–∞–Ω—Å', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ü–æ–¥–∞—Ä–∫–∏']
        },
        '–ü–∏—Ç–∞–Ω–∏–µ': {
            'type': '–†–∞—Å—Ö–æ–¥',
            'subcategories': ['–ü—Ä–æ–¥—É–∫—Ç—ã', '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–ö–∞—Ñ–µ', '–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã']
        },
        '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': {
            'type': '–†–∞—Å—Ö–æ–¥',
            'subcategories': ['–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–¢–∞–∫—Å–∏', '–ë–µ–Ω–∑–∏–Ω', '–ü–∞—Ä–∫–æ–≤–∫–∞']
        },
        '–ñ–∏–ª—å–µ': {
            'type': '–†–∞—Å—Ö–æ–¥',
            'subcategories': ['–ê—Ä–µ–Ω–¥–∞', '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', '–†–µ–º–æ–Ω—Ç', '–ú–µ–±–µ–ª—å']
        },
        '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': {
            'type': '–†–∞—Å—Ö–æ–¥',
            'subcategories': ['–ö–∏–Ω–æ', '–ö–æ–Ω—Ü–µ—Ä—Ç—ã', '–ò–≥—Ä—ã', '–•–æ–±–±–∏']
        },
        '–ó–¥–æ—Ä–æ–≤—å–µ': {
            'type': '–†–∞—Å—Ö–æ–¥',
            'subcategories': ['–í—Ä–∞—á–∏', '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞', '–§–∏—Ç–Ω–µ—Å', '–ö–æ—Å–º–µ—Ç–∏–∫–∞']
        },
        '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': {
            'type': '–†–∞—Å—Ö–æ–¥',
            'subcategories': ['–ö—É—Ä—Å—ã', '–ö–Ω–∏–≥–∏', '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏']
        }
    }
    
    categories = []
    for category_name, category_info in categories_data.items():
        # –ù–∞–π—Ç–∏ —Ç–∏–ø
        type_obj = next(t for t in types if t.name == category_info['type'])
        
        # –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category, created = Category.objects.get_or_create(
            name=category_name,
            defaults={'type': type_obj}
        )
        categories.append(category)
        if created:
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
        
        # –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for subcategory_name in category_info['subcategories']:
            subcategory, created = Subcategory.objects.get_or_create(
                name=subcategory_name,
                defaults={'category': category}
            )
            if created:
                print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory.name}")
    
    return statuses, types, categories

def create_money_flows(users, statuses, categories):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    print("\nüí∞ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    # –®–∞–±–ª–æ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    operations_templates = {
        'alice_manager': [
            # –î–æ—Ö–æ–¥—ã
            {'category': '–î–æ—Ö–æ–¥—ã', 'subcategory': '–ó–∞—Ä–ø–ª–∞—Ç–∞', 'amount_range': (80000, 120000), 'frequency': 'monthly'},
            {'category': '–î–æ—Ö–æ–¥—ã', 'subcategory': '–ü—Ä–µ–º–∏—è', 'amount_range': (20000, 50000), 'frequency': 'quarterly'},
            # –†–∞—Å—Ö–æ–¥—ã
            {'category': '–ñ–∏–ª—å–µ', 'subcategory': '–ê—Ä–µ–Ω–¥–∞', 'amount_range': (30000, 35000), 'frequency': 'monthly'},
            {'category': '–ü–∏—Ç–∞–Ω–∏–µ', 'subcategory': '–ü—Ä–æ–¥—É–∫—Ç—ã', 'amount_range': (8000, 12000), 'frequency': 'weekly'},
            {'category': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'subcategory': '–ë–µ–Ω–∑–∏–Ω', 'amount_range': (3000, 5000), 'frequency': 'weekly'},
            {'category': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'subcategory': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', 'amount_range': (2000, 8000), 'frequency': 'weekly'},
        ],
        'bob_developer': [
            # –î–æ—Ö–æ–¥—ã
            {'category': '–î–æ—Ö–æ–¥—ã', 'subcategory': '–ó–∞—Ä–ø–ª–∞—Ç–∞', 'amount_range': (100000, 150000), 'frequency': 'monthly'},
            {'category': '–î–æ—Ö–æ–¥—ã', 'subcategory': '–§—Ä–∏–ª–∞–Ω—Å', 'amount_range': (15000, 30000), 'frequency': 'monthly'},
            # –†–∞—Å—Ö–æ–¥—ã
            {'category': '–ñ–∏–ª—å–µ', 'subcategory': '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', 'amount_range': (5000, 8000), 'frequency': 'monthly'},
            {'category': '–ü–∏—Ç–∞–Ω–∏–µ', 'subcategory': '–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã', 'amount_range': (1500, 3000), 'frequency': 'weekly'},
            {'category': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'subcategory': '–ö—É—Ä—Å—ã', 'amount_range': (5000, 15000), 'frequency': 'monthly'},
            {'category': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'subcategory': '–ò–≥—Ä—ã', 'amount_range': (1000, 3000), 'frequency': 'weekly'},
        ],
        'carol_designer': [
            # –î–æ—Ö–æ–¥—ã
            {'category': '–î–æ—Ö–æ–¥—ã', 'subcategory': '–§—Ä–∏–ª–∞–Ω—Å', 'amount_range': (50000, 80000), 'frequency': 'monthly'},
            {'category': '–î–æ—Ö–æ–¥—ã', 'subcategory': '–ü–æ–¥–∞—Ä–∫–∏', 'amount_range': (3000, 10000), 'frequency': 'rarely'},
            # –†–∞—Å—Ö–æ–¥—ã
            {'category': '–ü–∏—Ç–∞–Ω–∏–µ', 'subcategory': '–ö–∞—Ñ–µ', 'amount_range': (500, 1500), 'frequency': 'daily'},
            {'category': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'subcategory': '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'amount_range': (2000, 3000), 'frequency': 'monthly'},
            {'category': '–ó–¥–æ—Ä–æ–≤—å–µ', 'subcategory': '–ö–æ—Å–º–µ—Ç–∏–∫–∞', 'amount_range': (2000, 5000), 'frequency': 'monthly'},
            {'category': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'subcategory': '–ö–∏–Ω–æ', 'amount_range': (800, 1200), 'frequency': 'weekly'},
        ],
        'demo_user': [
            # –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ
            {'category': '–î–æ—Ö–æ–¥—ã', 'subcategory': '–ó–∞—Ä–ø–ª–∞—Ç–∞', 'amount_range': (45000, 55000), 'frequency': 'monthly'},
            {'category': '–ü–∏—Ç–∞–Ω–∏–µ', 'subcategory': '–ü—Ä–æ–¥—É–∫—Ç—ã', 'amount_range': (3000, 6000), 'frequency': 'weekly'},
            {'category': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'subcategory': '–¢–∞–∫—Å–∏', 'amount_range': (300, 800), 'frequency': 'weekly'},
            {'category': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'subcategory': '–ö–æ–Ω—Ü–µ—Ä—Ç—ã', 'amount_range': (1500, 3000), 'frequency': 'rarely'},
        ]
    }
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
    start_date = datetime.now() - timedelta(days=180)
    end_date = datetime.now()
    
    active_status = statuses[0]  # –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    
    created_count = 0
    
    for user in users:
        user_templates = operations_templates.get(user.username, operations_templates['demo_user'])
        
        print(f"\n  üë§ –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è {user.first_name} {user.last_name}:")
        
        current_date = start_date
        while current_date <= end_date:
            for template in user_templates:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —ç—Ç—É –¥–∞—Ç—É
                should_create = False
                
                if template['frequency'] == 'daily':
                    should_create = random.random() < 0.7  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                elif template['frequency'] == 'weekly':
                    should_create = current_date.weekday() == 1 and random.random() < 0.8  # –í—Ç–æ—Ä–Ω–∏–∫, 80%
                elif template['frequency'] == 'monthly':
                    should_create = current_date.day == 1 and random.random() < 0.9  # 1 —á–∏—Å–ª–æ, 90%
                elif template['frequency'] == 'quarterly':
                    should_create = current_date.day == 1 and current_date.month in [1, 4, 7, 10] and random.random() < 0.7
                elif template['frequency'] == 'rarely':
                    should_create = random.random() < 0.05  # 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                
                if should_create:
                    # –ù–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    try:
                        category = Category.objects.get(name=template['category'])
                        subcategory = Subcategory.objects.get(
                            name=template['subcategory'],
                            category=category
                        )
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É
                        min_amount, max_amount = template['amount_range']
                        amount = Decimal(str(random.randint(min_amount, max_amount)))
                        
                        # –°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
                        money_flow = MoneyFlow.objects.create(
                            user=user,
                            created_at=current_date.date(),
                            status=active_status,
                            type=category.type,
                            category=category,
                            subcategory=subcategory,
                            amount=amount,
                            comment=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {subcategory.name}"
                        )
                        
                        created_count += 1
                        
                    except (Category.DoesNotExist, Subcategory.DoesNotExist) as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            
            current_date += timedelta(days=1)
        
        user_operations = MoneyFlow.objects.filter(user=user).count()
        print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {user_operations}")
    
    print(f"\nüí∞ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {created_count}")
    return created_count

def create_sample_comments():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º."""
    print("\nüí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º...")
    
    comments_by_subcategory = {
        '–ó–∞—Ä–ø–ª–∞—Ç–∞': [
            '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü',
            '–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞',
            '–ó–∞—Ä–ø–ª–∞—Ç–∞ + –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏',
            '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'
        ],
        '–ü—Ä–æ–¥—É–∫—Ç—ã': [
            '–ó–∞–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é',
            '–ü–æ—Ö–æ–¥ –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç',
            '–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –ü—è—Ç–µ—Ä–æ—á–∫–µ',
            '–ï–¥–∞ –Ω–∞ –¥–æ–º',
            '–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ'
        ],
        '–ö–∞—Ñ–µ': [
            '–ö–æ—Ñ–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏',
            '–û–±–µ–¥ –≤ –∫–∞—Ñ–µ —Ä—è–¥–æ–º —Å —Ä–∞–±–æ—Ç–æ–π',
            '–í—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –∫–∞—Ñ–µ',
            '–ö–æ—Ñ–µ-–±—Ä–µ–π–∫',
            '–ó–∞–≤—Ç—Ä–∞–∫ –≤ –∫–∞—Ñ–µ'
        ],
        '–¢–∞–∫—Å–∏': [
            '–ü–æ–µ–∑–¥–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É',
            '–¢–∞–∫—Å–∏ –¥–æ–º–æ–π –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã',
            '–ü–æ–µ–∑–¥–∫–∞ –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç',
            '–¢–∞–∫—Å–∏ –≤ –¥–æ–∂–¥—å',
            '–°—Ä–æ—á–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞'
        ],
        '–ë–µ–Ω–∑–∏–Ω': [
            '–ó–∞–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –±–∞–∫–∞',
            '–ó–∞–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ê–ó–°',
            '–¢–æ–ø–ª–∏–≤–æ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏',
            '–ó–∞–ø—Ä–∞–≤–∫–∞ –º–∞—à–∏–Ω—ã'
        ],
        '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã': [
            '–£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ',
            '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–≥–∞',
            '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω',
            '–î–µ–ª–æ–≤–æ–π –æ–±–µ–¥',
            '–°–µ–º–µ–π–Ω—ã–π —É–∂–∏–Ω'
        ]
    }
    
    flows = MoneyFlow.objects.filter(
        comment__startswith='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è'
    )
    
    updated_count = 0
    for flow in flows:
        subcategory_name = flow.subcategory.name
        if subcategory_name in comments_by_subcategory:
            new_comment = random.choice(comments_by_subcategory[subcategory_name])
            flow.comment = new_comment
            flow.save()
            updated_count += 1
    
    print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {updated_count}")

def print_summary():
    """–í—ã–≤–æ–¥ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    print("\nüìä –°–í–û–î–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
    print("=" * 50)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    users_count = User.objects.count()
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
    
    # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    statuses_count = Status.objects.count()
    types_count = Type.objects.count()
    categories_count = Category.objects.count()
    subcategories_count = Subcategory.objects.count()
    
    print(f"üìã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏:")
    print(f"   - –°—Ç–∞—Ç—É—Å–æ–≤: {statuses_count}")
    print(f"   - –¢–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π: {types_count}")
    print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}")
    print(f"   - –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {subcategories_count}")
    
    # –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    print(f"üí∞ –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    for user in User.objects.all():
        operations_count = MoneyFlow.objects.filter(user=user).count()
        if operations_count > 0:
            total_income = MoneyFlow.objects.filter(
                user=user, 
                type__name='–î–æ—Ö–æ–¥'
            ).aggregate(total=django.db.models.Sum('amount'))['total'] or 0
            
            total_expense = MoneyFlow.objects.filter(
                user=user, 
                type__name='–†–∞—Å—Ö–æ–¥'
            ).aggregate(total=django.db.models.Sum('amount'))['total'] or 0
            
            print(f"   - {user.first_name} {user.last_name}: {operations_count} –æ–ø–µ—Ä–∞—Ü–∏–π")
            print(f"     –î–æ—Ö–æ–¥—ã: {total_income:,.2f} ‚ÇΩ, –†–∞—Å—Ö–æ–¥—ã: {total_expense:,.2f} ‚ÇΩ")
    
    total_operations = MoneyFlow.objects.count()
    print(f"\nüí∞ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_operations}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("üöÄ –ó–ê–ì–†–£–ó–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        users = create_users()
        statuses, types, categories = create_reference_data()
        create_money_flows(users, statuses, categories)
        create_sample_comments()
        
        # –°–≤–æ–¥–∫–∞
        print_summary()
        
        print("\nüéâ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù–´!")
        print("\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
        print("   Email: alice@example.com, –ü–∞—Ä–æ–ª—å: testpass123")
        print("   Email: bob@example.com, –ü–∞—Ä–æ–ª—å: testpass123") 
        print("   Email: carol@example.com, –ü–∞—Ä–æ–ª—å: testpass123")
        print("   Email: demo@example.com, –ü–∞—Ä–æ–ª—å: demo123")
        
        print("\nüåê –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/")
        print("   2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—ã—à–µ")
        print("   3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   4. API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/api/swagger/")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    main() 